const API_URL = "http://localhost:8080/api"; // URL –±—ç–∫–µ–Ω–¥–∞

// üöö –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤
export const fetchTrucks = async () => {
  try {
    const response = await fetch(`${API_URL}/trucks`);
    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤: ${response.status}`);
    return response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤:", error);
    return [];
  }
};

// üöö –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–∑–æ–≤–∏–∫ –ø–æ ID
export const fetchTruckById = async (id) => {
  try {
    const response = await fetch(`${API_URL}/trucks/${id}`);
    if (!response.ok) throw new Error(`–ì—Ä—É–∑–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${response.status}`);
    const data = await response.json();
    if (!data.trips) data.trips = [];
    return data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤–∏–∫–∞:", error);
    return null;
  }
};

// üöö –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥—Ä—É–∑–æ–≤–∏–∫
export const addTruck = async (truckData) => {
  try {
    const response = await fetch(`${API_URL}/trucks`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(truckData),
    });

    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤–∏–∫–∞: ${response.status}`);

    return response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤–∏–∫–∞:", error);
    throw error;
  }
};

// üöö –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑–æ–≤–∏–∫ –ø–æ ID
export const deleteTruck = async (id) => {
  try {
    const response = await fetch(`${API_URL}/trucks/${id}`, {
      method: "DELETE",
    });

    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤–∏–∫–∞: ${response.status}`);
    
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤–∏–∫–∞:", error);
    return false;
  }
};

// üöö –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–æ–≤–∏–∫–µ
export const updateTruck = async (id, truckData) => {
  try {
    const response = await fetch(`${API_URL}/trucks/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(truckData),
    });

    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤–∏–∫–∞: ${response.status}`);

    return response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤–∏–∫–∞:", error);
    throw error;
  }
};

// üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤
export const fetchTrips = async () => {
  try {
    const response = await fetch(`${API_URL}/trips`);
    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Å–æ–≤: ${response.status}`);
    return response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Å–æ–≤:", error);
    return [];
  }
};

// üìå –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–π—Å
export const addTrip = async (tripData) => {
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", JSON.stringify(tripData, null, 2));
  
    const response = await fetch(`${API_URL}/trips`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(tripData),
    });
  
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ API (–°—Ç–∞—Ç—É—Å ${response.status}):`, errorText);
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} - ${errorText}`);
    }
  
    return response.json();
  };
  

// üìå –£–¥–∞–ª–∏—Ç—å —Ä–µ–π—Å –ø–æ ID
export const deleteTrip = async (id) => {
  try {
    const response = await fetch(`${API_URL}/trips/${id}`, {
      method: "DELETE",
    });

    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–π—Å–∞: ${response.status}`);
    
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–π—Å–∞:", error);
    return false;
  }
};
