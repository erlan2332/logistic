import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { fetchTruckById, addTrip, deleteTrip } from "../api";
import "./styles/TruckDetails.css";

function TruckDetails() {
  const { id } = useParams();
  const [truck, setTruck] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [cargo, setCargo] = useState("–º–∞–∑—É—Ç"); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–º–∞–∑—É—Ç"
  const [destination, setDestination] = useState("–û—Ä–ª–æ–≤–∫–∞"); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥
  const [driver, setDriver] = useState("–ê–∫–∏–º–∞–ª–∏"); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å
  const [payment, setPayment] = useState("");

  // üîÑ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–æ–≤–∏–∫–µ
  const loadTruckData = async () => {
    try {
      const data = await fetchTruckById(id);
      if (!data.trips) {
        data.trips = [];
      }
      setTruck(data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–∑–æ–≤–∏–∫–∞:", error);
    }
  };

  useEffect(() => {
    loadTruckData();
  }, [id]);

  if (!truck) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  // üÜï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞**
  const handleAddTrip = async (e) => {
    e.preventDefault();

    if (!truck || !truck.id) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ì—Ä—É–∑–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const newTrip = {
      date: new Date().toISOString().split("T")[0],
      destination,
      cargo,
      driver,
      payment: parseFloat(payment),
      truck: { id: truck.id },
    };

    console.log("üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–π—Å:", newTrip);

    try {
      await addTrip(newTrip);
      await loadTruckData(); // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞
      setShowModal(false);
      setCargo("–º–∞–∑—É—Ç");
      setDestination("–û—Ä–ª–æ–≤–∫–∞");
      setDriver("–ê–∫–∏–º–∞–ª–∏");
      setPayment("");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Å–∞:", error);
    }
  };

  // ‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞**
  const handleDeleteTrip = async (tripId) => {
    if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–π—Å?")) return;

    try {
      await deleteTrip(tripId);
      await loadTruckData(); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–π—Å–∞:", error);
    }
  };

  return (
    <div className="details-page">
      <div className="selected-truck-box">
        <div className="truck-info">
          <div className="gridModelCalibra">
            <div className="trackNumber">{truck.number}</div>
            <div className="calibrNum">–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞</div>
            <div className="gridgrid">
              <div className="trackMode">{truck.model}</div>
            </div>
            <div className="gridgrid2">
              <div className="trackCali">{truck.calibration}</div>
            </div>
          </div>
        </div>
      </div>

      <button className="add-trip-btn" onClick={() => setShowModal(true)}>
        –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å
      </button>
      <div className="trips-list">
        {truck.trips.length > 0 ? (
          truck.trips.map((trip) => (
            <div className="trip-card" key={trip.id}>
              <div className="trip-left">
              <div className="datas">–¥–∞—Ç–∞</div>
                <div className="trip-date">{trip.date}</div>
                <div className="kuda">–ö—É–¥–∞</div>
                <div className="trip-dest">{trip.destination}</div>
              </div>
              <div className="trip-right">
                <div className="gruz">–≥—Ä—É–∑</div>
                <div className="trip-cargo">{trip.cargo}</div>
                <div className="trip-driver">{trip.driver}</div>
                <div className="trip-payment">
                    –æ–ø–ª–∞—Ç–∞: {trip.payment} c/–ª
                    <hr className="hrert"/>
                </div>
                <div className="summa"> —Å—É–º–º–∞: {parseFloat(trip.payment) * parseFloat(truck.calibration)} </div>
                <button className="delete-btn-eert" onClick={() => handleDeleteTrip(trip.id)}>
                   –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))
        ) : (
          <p>–†–µ–π—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
        )}
      </div>

      {/* üÜï **–ú–æ–¥–∞–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞** */}
      {showModal && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <h2>–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å</h2>
            <form onSubmit={handleAddTrip}>
              {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–∑–∞ */}
              <label>–ì—Ä—É–∑</label>
              <select value={cargo} onChange={(e) => setCargo(e.target.value)} required>
                <option value="–º–∞–∑—É—Ç">–ú–∞–∑—É—Ç</option>
                <option value="–Ω–µ—Ñ—Ç—å">–ù–µ—Ñ—Ç—å</option>
                <option value="–¥—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</option>
              </select>

              {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ */}
              <label>–ö—É–¥–∞</label>
              <select value={destination} onChange={(e) => setDestination(e.target.value)} required>
                <option value="–û—Ä–ª–æ–≤–∫–∞">–û—Ä–ª–æ–≤–∫–∞</option>
                <option value="–ë–µ–ª–æ–≤–æ–¥—Å–∫–∏–π">–ë–µ–ª–æ–≤–æ–¥—Å–∫–∏–π</option>
                <option value="–°–æ—Å–Ω–æ–≤–∫–∞">–°–æ—Å–Ω–æ–≤–∫–∞</option>
                <option value="–ö–∞—Ä–∞-–ë–∞–ª—Ç–∞">–ö–∞—Ä–∞-–ë–∞–ª—Ç–∞</option>
                <option value="–´—Å—Å—ã–∫-–ö–æ–ª">–´—Å—Å—ã–∫-–ö–æ–ª</option>
                <option value="–ö–æ—á–∫–æ—Ä-–ê—Ç–∞">–ö–æ—á–∫–æ—Ä-–ê—Ç–∞</option>
              </select>

              {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è */}
              <label>–í–æ–¥–∏—Ç–µ–ª—å</label>
              <select value={driver} onChange={(e) => setDriver(e.target.value)} required>
                <option value="–ê–∫–∏–º–∞–ª–∏">–ê–∫–∏–º–∞–ª–∏</option>
                <option value="–ú–∏—Ä–ª–∞–Ω">–ú–∏—Ä–ª–∞–Ω</option>
                <option value="–≠–ª—å–Ω—É—Ä">–≠–ª—å–Ω—É—Ä</option>
                <option value="–£–ª–∞–Ω">–£–ª–∞–Ω</option>
                <option value="–ê–ª—Ç—ã–Ω">–ê–ª—Ç—ã–Ω</option>
                <option value="–®—É—Ö—Ä–∞—Ç">–®—É—Ö—Ä–∞—Ç</option>
                <option value="–†—ã—Å–±–µ–∫">–†—ã—Å–±–µ–∫</option>
                <option value="–ù–∞–∑–∞–Ω">–ù–∞–∑–∞–Ω</option>
              </select>

              {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–ª–∞—Ç—ã */}
              <label>–û–ø–ª–∞—Ç–∞ (c/–∫–≥)</label>
              <input
                type="number"
                step="0.01"
                placeholder="–û–ø–ª–∞—Ç–∞ (c/–∫–≥)"
                value={payment}
                onChange={(e) => setPayment(e.target.value)}
                required
              />

              {/* –ö–Ω–æ–ø–∫–∏ */}
              <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
              <button type="button" onClick={() => setShowModal(false)}>–û—Ç–º–µ–Ω–∞</button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default TruckDetails;
